接口在开发中的作用
    注意:接口在开发中的作用,类似于多态在开发中的作用
    多态:面向抽象编程,不要面向具体编程,降低程序的耦合度,提高程序的扩展力.
        public class Master{
            public void feed (Dog d){}
            public void feed (Cat c){}
            //假设又要养其他的宠物,那么这个时候再加一个方法.(需要修改代码)
            //这样扩展力太差了,违背了OCP原则(对扩展开放,对修改关闭)
        }
        正确的示范:
        public class Master{
            public void feed (Animal a){
                //面向Animal父类编程,父类是比子类更抽象的.
                //所以我们叫做面向抽象编程,不要面向具体编程.
                //这样程序的扩展力就强.
            }
        }

    接口在开发中的作用?
        接口是不是完全抽象的?是!
        而我们以后正好要求,面向抽象编程.
        面向抽象编程这句话以后可以修改为:面向接口编程.
        有了接口表示可以可插拔,可插拔表示扩展力很强,不是焊接死的.

        主板和内存条之间又插槽,这个插槽就是接口,内存条坏了,可以重新
        买一个换下来,这叫做高扩展性(低耦合度).

        接口是不是在现实世界中到处都是呢?
            螺栓和螺母之间
            灯泡和灯口之间
            笔记本电脑和键盘之间(USB接口,USB接口是不是某个计算机协会制定的协议)
        接口有什么用?扩展性好,可插拔.
        接口是一个抽象的概念

        分析:
            中午去饭馆吃饭,这个过程有接口吗?
                接口是抽象的.

                菜单是一个接口(比如:西红柿炒蛋)

                谁面向接口调用.(顾客面向菜单点菜,调用接口)
                谁负责实现这个接口.(后台的厨师把西红柿炒蛋做好!是接口的实现者)

                    这个接口有什么用呢?
                        这个饭馆的菜单,让"顾客"和"后厨"解耦合了.
                        顾客不用找后厨,后厨不用找顾客,他们之间完全依靠这个抽象的菜单沟通.

    总结一句话:
        面向接口编程,可以降低程序的耦合度,提高程序的扩展力,符合OCP开发原则.
        接口的使用离不开多态机制.

        接口可以解耦合,解开的是谁和谁的耦合?
        任何一个接口都有调用者和实现者.
        接口可以将调用者和实现者解耦合.
        调用者面向接口调用.(顾客)
        实现者面向接口编写实现.(厨师)